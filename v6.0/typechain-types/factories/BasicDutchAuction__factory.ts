/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BasicDutchAuction,
  BasicDutchAuctionInterface,
} from "../BasicDutchAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reservePrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numBlocksAuctionOpen",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerPriceDecrement",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bid",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "numBlocksAuctionOpen",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "offerPriceDecrement",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address payable",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "reservePrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6101206040523480156200001257600080fd5b5060405162000f3d38038062000f3d8339818101604052810190620000389190620001c4565b620000546778512da4dece66ae60c01b6200018160201b60201c565b6200007067312cf882c28684ac60c01b6200018160201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050620000c06730ecbbb8d67befd160c01b6200018160201b60201c565b8260a08181525050620000e467a192fe5979a74c0060c01b6200018160201b60201c565b8160c081815250506200010867eb180acd6326193860c01b6200018160201b60201c565b8060e081815250506200012c67f01f394a182c17a160c01b6200018160201b60201c565b4361010081815250506200015167a59118e7c825a6f760c01b6200018160201b60201c565b60e05160c0516200016391906200024f565b60a051620001729190620002b0565b6000819055505050506200030d565b50565b600080fd5b6000819050919050565b6200019e8162000189565b8114620001aa57600080fd5b50565b600081519050620001be8162000193565b92915050565b600080600060608486031215620001e057620001df62000184565b5b6000620001f086828701620001ad565b93505060206200020386828701620001ad565b92505060406200021686828701620001ad565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200025c8262000189565b9150620002698362000189565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615620002a557620002a462000220565b5b828202905092915050565b6000620002bd8262000189565b9150620002ca8362000189565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000302576200030162000220565b5b828201905092915050565b60805160a05160c05160e05161010051610bba62000383600039600081816103240152818161062c0152610722015260008181610674015261083f01526000818161038e01528181610608015261077801526000818161069801526107da01526000818161054901526106500152610bba6000f3fe6080604052600436106100865760003560e01c80638da5cb5b116100595780638da5cb5b1461012a578063d3642a8814610155578063db2e1eed14610180578063dfbf53ae146101ab578063eb91d37e146101d657610086565b80631998aeef1461008b5780631d0806ae146100a95780633103ea62146100d457806348cd4cb1146100ff575b600080fd5b610093610201565b6040516100a091906108c1565b60405180910390f35b3480156100b557600080fd5b506100be610600565b6040516100cb91906108f5565b60405180910390f35b3480156100e057600080fd5b506100e9610606565b6040516100f691906108f5565b60405180910390f35b34801561010b57600080fd5b5061011461062a565b60405161012191906108f5565b60405180910390f35b34801561013657600080fd5b5061013f61064e565b60405161014c9190610931565b60405180910390f35b34801561016157600080fd5b5061016a610672565b60405161017791906108f5565b60405180910390f35b34801561018c57600080fd5b50610195610696565b6040516101a291906108f5565b60405180910390f35b3480156101b757600080fd5b506101c06106ba565b6040516101cd91906108c1565b60405180910390f35b3480156101e257600080fd5b506101eb6106e0565b6040516101f891906108f5565b60405180910390f35b6000610217670bb8993b1e1076c160c01b61087d565b61022b67ded7e4b65da59f8860c01b61087d565b61023f676d3de6b9c43ee4d760c01b61087d565b61025367c2ca9f1b482f7e4960c01b61087d565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db906109a9565b60405180910390fd5b6102f86703086413de118a8360c01b61087d565b61030c678aabb68b94e9f8db60c01b61087d565b6103206712e8ba5a4672e8e760c01b61087d565b60007f00000000000000000000000000000000000000000000000000000000000000004361034e91906109f8565b905061036467d5fa1ac746ea17d460c01b61087d565b6103786796e2512e26fae69760c01b61087d565b61038c67e25349aefde2f26c60c01b61087d565b7f00000000000000000000000000000000000000000000000000000000000000008111156103ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e690610a78565b60405180910390fd5b610403670a65187d7f392da360c01b61087d565b610417678a8f3fe6d7a1aa4860c01b61087d565b61042b67e233c45b8933766060c01b61087d565b60006104356106e0565b905061044b671638099a95221c1560c01b61087d565b61045f6717efa1dceac506a660c01b61087d565b61047367b26cdc25c1254d6260c01b61087d565b803410156104b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ad90610b0a565b60405180910390fd5b6104ca67b5659e0cd1070fbd60c01b61087d565b6104de670976faabb9b106f960c01b61087d565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610533678fa1d07e2cb1ed1c60c01b61087d565b61054767398edc3255dad07d60c01b61087d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156105ad573d6000803e3d6000fd5b506105c267e6d1983071f0291b60c01b61087d565b6105d6677b4ac687fd30b5a760c01b61087d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250505090565b60005481565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006106f667eec2c6e9b6510edd60c01b61087d565b61070a677fd54b98667794ba60c01b61087d565b61071e67e81a64e2b5eade4860c01b61087d565b60007f00000000000000000000000000000000000000000000000000000000000000004361074c91906109f8565b9050610762676e4af3a94d51205360c01b61087d565b6107766791823d559cce119160c01b61087d565b7f00000000000000000000000000000000000000000000000000000000000000008110610801576107b0667c050bd48cffc060c01b61087d565b6107c467fa1f1e2fe835963260c01b61087d565b6107d867197ea865cbccfdeb60c01b61087d565b7f000000000000000000000000000000000000000000000000000000000000000091505061087a565b610815674c89955265ae925e60c01b61087d565b610829675ce3f8ce24f2baf660c01b61087d565b61083d6760cf6166adfaea0c60c01b61087d565b7f0000000000000000000000000000000000000000000000000000000000000000816108699190610b2a565b60005461087691906109f8565b9150505b90565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108ab82610880565b9050919050565b6108bb816108a0565b82525050565b60006020820190506108d660008301846108b2565b92915050565b6000819050919050565b6108ef816108dc565b82525050565b600060208201905061090a60008301846108e6565b92915050565b600061091b82610880565b9050919050565b61092b81610910565b82525050565b60006020820190506109466000830184610922565b92915050565b600082825260208201905092915050565b7f41756374696f6e2068617320616c726561647920636f6e636c75646564000000600082015250565b6000610993601d8361094c565b915061099e8261095d565b602082019050919050565b600060208201905081810360008301526109c281610986565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a03826108dc565b9150610a0e836108dc565b925082821015610a2157610a206109c9565b5b828203905092915050565b7f41756374696f6e20657870697265640000000000000000000000000000000000600082015250565b6000610a62600f8361094c565b9150610a6d82610a2c565b602082019050919050565b60006020820190508181036000830152610a9181610a55565b9050919050565b7f546865207765692076616c75652073656e74206973206e6f742061636365707460008201527f61626c6500000000000000000000000000000000000000000000000000000000602082015250565b6000610af460248361094c565b9150610aff82610a98565b604082019050919050565b60006020820190508181036000830152610b2381610ae7565b9050919050565b6000610b35826108dc565b9150610b40836108dc565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b7957610b786109c9565b5b82820290509291505056fea2646970667358221220446db64225c0ddd2464ec56f56381d0e84ff072156ca2c769c4c9aac208ca70364736f6c63430008090033";

type BasicDutchAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicDutchAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicDutchAuction__factory extends ContractFactory {
  constructor(...args: BasicDutchAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BasicDutchAuction> {
    return super.deploy(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    ) as Promise<BasicDutchAuction>;
  }
  override getDeployTransaction(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    );
  }
  override attach(address: string): BasicDutchAuction {
    return super.attach(address) as BasicDutchAuction;
  }
  override connect(signer: Signer): BasicDutchAuction__factory {
    return super.connect(signer) as BasicDutchAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicDutchAuctionInterface {
    return new utils.Interface(_abi) as BasicDutchAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicDutchAuction {
    return new Contract(address, _abi, signerOrProvider) as BasicDutchAuction;
  }
}
